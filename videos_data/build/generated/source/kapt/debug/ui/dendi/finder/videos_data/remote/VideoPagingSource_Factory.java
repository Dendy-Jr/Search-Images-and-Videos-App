// Generated by Dagger (https://dagger.dev).
package ui.dendi.finder.videos_data.remote;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class VideoPagingSource_Factory implements Factory<VideoPagingSource> {
  private final Provider<VideosRemoteDataSource> remoteDataSourceProvider;

  private final Provider<String> queryProvider;

  private final Provider<String> typeProvider;

  private final Provider<String> categoryProvider;

  private final Provider<String> orderProvider;

  public VideoPagingSource_Factory(Provider<VideosRemoteDataSource> remoteDataSourceProvider,
      Provider<String> queryProvider, Provider<String> typeProvider,
      Provider<String> categoryProvider, Provider<String> orderProvider) {
    this.remoteDataSourceProvider = remoteDataSourceProvider;
    this.queryProvider = queryProvider;
    this.typeProvider = typeProvider;
    this.categoryProvider = categoryProvider;
    this.orderProvider = orderProvider;
  }

  @Override
  public VideoPagingSource get() {
    return newInstance(remoteDataSourceProvider.get(), queryProvider.get(), typeProvider.get(), categoryProvider.get(), orderProvider.get());
  }

  public static VideoPagingSource_Factory create(
      Provider<VideosRemoteDataSource> remoteDataSourceProvider, Provider<String> queryProvider,
      Provider<String> typeProvider, Provider<String> categoryProvider,
      Provider<String> orderProvider) {
    return new VideoPagingSource_Factory(remoteDataSourceProvider, queryProvider, typeProvider, categoryProvider, orderProvider);
  }

  public static VideoPagingSource newInstance(VideosRemoteDataSource remoteDataSource, String query,
      String type, String category, String order) {
    return new VideoPagingSource(remoteDataSource, query, type, category, order);
  }
}
