// Generated by Dagger (https://dagger.dev).
package ui.dendi.finder.videos_data.remote;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class VideoPagingSource_Factory implements Factory<VideoPagingSource> {
  private final Provider<String> categoryProvider;

  private final Provider<String> orderProvider;

  private final Provider<String> queryProvider;

  private final Provider<VideosRemoteDataSource> remoteDataSourceProvider;

  private final Provider<String> typeProvider;

  public VideoPagingSource_Factory(Provider<String> categoryProvider,
      Provider<String> orderProvider, Provider<String> queryProvider,
      Provider<VideosRemoteDataSource> remoteDataSourceProvider, Provider<String> typeProvider) {
    this.categoryProvider = categoryProvider;
    this.orderProvider = orderProvider;
    this.queryProvider = queryProvider;
    this.remoteDataSourceProvider = remoteDataSourceProvider;
    this.typeProvider = typeProvider;
  }

  @Override
  public VideoPagingSource get() {
    return newInstance(categoryProvider.get(), orderProvider.get(), queryProvider.get(), remoteDataSourceProvider.get(), typeProvider.get());
  }

  public static VideoPagingSource_Factory create(Provider<String> categoryProvider,
      Provider<String> orderProvider, Provider<String> queryProvider,
      Provider<VideosRemoteDataSource> remoteDataSourceProvider, Provider<String> typeProvider) {
    return new VideoPagingSource_Factory(categoryProvider, orderProvider, queryProvider, remoteDataSourceProvider, typeProvider);
  }

  public static VideoPagingSource newInstance(String category, String order, String query,
      VideosRemoteDataSource remoteDataSource, String type) {
    return new VideoPagingSource(category, order, query, remoteDataSource, type);
  }
}
