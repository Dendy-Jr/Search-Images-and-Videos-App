// Generated by Dagger (https://dagger.dev).
package ui.dendi.finder.images_presentation.images;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import ui.dendi.finder.core.core.navigation.AppNavDirections;
import ui.dendi.finder.images_data.local.ImagesFilterStorage;
import ui.dendi.finder.images_data.local.ImagesStorage;
import ui.dendi.finder.images_domain.usecase.SaveImageToFavoritesUseCase;
import ui.dendi.finder.images_domain.usecase.SearchImagesUseCase;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SearchImagesViewModel_Factory implements Factory<SearchImagesViewModel> {
  private final Provider<AppNavDirections> appNavDirectionsProvider;

  private final Provider<SearchImagesUseCase> searchImageUseCaseProvider;

  private final Provider<SaveImageToFavoritesUseCase> saveImageToFavoritesUseCaseProvider;

  private final Provider<ImagesFilterStorage> imagesFilterStorageProvider;

  private final Provider<ImagesStorage> storageProvider;

  public SearchImagesViewModel_Factory(Provider<AppNavDirections> appNavDirectionsProvider,
      Provider<SearchImagesUseCase> searchImageUseCaseProvider,
      Provider<SaveImageToFavoritesUseCase> saveImageToFavoritesUseCaseProvider,
      Provider<ImagesFilterStorage> imagesFilterStorageProvider,
      Provider<ImagesStorage> storageProvider) {
    this.appNavDirectionsProvider = appNavDirectionsProvider;
    this.searchImageUseCaseProvider = searchImageUseCaseProvider;
    this.saveImageToFavoritesUseCaseProvider = saveImageToFavoritesUseCaseProvider;
    this.imagesFilterStorageProvider = imagesFilterStorageProvider;
    this.storageProvider = storageProvider;
  }

  @Override
  public SearchImagesViewModel get() {
    return newInstance(appNavDirectionsProvider.get(), searchImageUseCaseProvider.get(), saveImageToFavoritesUseCaseProvider.get(), imagesFilterStorageProvider.get(), storageProvider.get());
  }

  public static SearchImagesViewModel_Factory create(
      Provider<AppNavDirections> appNavDirectionsProvider,
      Provider<SearchImagesUseCase> searchImageUseCaseProvider,
      Provider<SaveImageToFavoritesUseCase> saveImageToFavoritesUseCaseProvider,
      Provider<ImagesFilterStorage> imagesFilterStorageProvider,
      Provider<ImagesStorage> storageProvider) {
    return new SearchImagesViewModel_Factory(appNavDirectionsProvider, searchImageUseCaseProvider, saveImageToFavoritesUseCaseProvider, imagesFilterStorageProvider, storageProvider);
  }

  public static SearchImagesViewModel newInstance(AppNavDirections appNavDirections,
      SearchImagesUseCase searchImageUseCase,
      SaveImageToFavoritesUseCase saveImageToFavoritesUseCase,
      ImagesFilterStorage imagesFilterStorage, ImagesStorage storage) {
    return new SearchImagesViewModel(appNavDirections, searchImageUseCase, saveImageToFavoritesUseCase, imagesFilterStorage, storage);
  }
}
